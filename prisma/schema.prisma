// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id @default(uuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    password      String?
    posts         Post[]
    Profile       Profile?

    // Optional for WebAuthn support
    Authenticator Authenticator[]
    image         String?
    accounts      Account[]
    sessions      Session[]

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model Profile {
    id            String  @id
    user          User    @relation(fields: [id], references: [id], onDelete: Cascade)
    name          String?
    bio           String?
    username      String  @unique
    lowername     String  @unique
    avatarUrl     String?
    pronouns      String?
    site          String?
    age           Int?
    favoriteGenre String?

    lists      List[]
    posts      GamePost[]
    gameStatus UserGameStatus[]

    public    Boolean  @default(false)
    verified  Boolean  @default(false)
    updatedAt DateTime @default(now()) @updatedAt
}

model Game {
    id          String   @id @default(uuid())
    rawgId      Int      @unique
    title       String
    coverUrl    String?
    genre       String[]
    platform    String[]
    publisher   String[]
    playtime    Int?
    releaseDate String?

    lists      ListGame[]
    posts      GamePost[]
    gameStatus UserGameStatus[]

    createdAt DateTime @default(now())
}

model List {
    id          String  @id @default(uuid())
    shortId     String  @unique @default(uuid())
    name        String
    description String?

    user   Profile @relation(fields: [userId], references: [id])
    userId String

    games ListGame[]

    createdAt DateTime @default(now())
}

model ListGame {
    id String @id @default(uuid())

    list   List   @relation(fields: [listId], references: [id])
    listId String

    game   Game @relation(fields: [gameId], references: [rawgId])
    gameId Int

    @@unique([listId, gameId])
}

model GamePost {
    id       String  @id @default(uuid())
    shortId  String  @unique
    content  String
    imageUrl String?

    user   Profile @relation(fields: [userId], references: [id])
    userId String

    game   Game? @relation(fields: [gameId], references: [rawgId])
    gameId Int?

    played Int?

    published Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model UserGameStatus {
    id     String     @id @default(uuid())
    status GameStatus

    user   Profile @relation(fields: [userId], references: [id])
    userId String

    game   Game   @relation(fields: [gameId], references: [id])
    gameId String

    @@unique([userId, gameId])
}

enum GameStatus {
    WANT_TO_PLAY
    PLAYING
    PLAYED
    DROPPED
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}

model Post {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    title     String
    content   String?
    published Boolean  @default(false)
    authorId  String?
    author    User?    @relation(fields: [authorId], references: [id])
}
